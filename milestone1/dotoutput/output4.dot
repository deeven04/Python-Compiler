digraph G {
	statements44 [label = "statements"]
	statements44 -> funcdef43;
	funcdef43 [label = "funcdef(Fibonacci)"]
	funcdef43 -> parameter1;
	parameter1 [label = "parameter"]
	parameter1 -> tfpdef0;
	tfpdef0 [label = "tfpdef(n)"]
	funcdef43 -> stmts42;
	stmts42 [label = "stmts"]
	stmts42 -> if40;
	if40 [label = "if"]
	if40 -> operand3;
	operand3 [label = "operand(<=)"]
	operand3 -> int4;
	int4 [label = "int (0)"]
	operand3 -> NAME2;
	NAME2 [label = "atom (n)"]
	if40 -> stmts7;
	stmts7 [label = "stmts"]
	stmts7 -> print6;
	print6 [label = "print"]
	print6 -> string5;
	string5 [label = "string ('Incorrect input')"]
	stmts7 -> return9;
	return9 [label = "return"]
	return9 -> int8;
	int8 [label = "int (0)"]
	if40 -> elif23;
	elif23 [label = "elif"]
	elif23 -> operand11;
	operand11 [label = "operand(==)"]
	operand11 -> int12;
	int12 [label = "int (1)"]
	operand11 -> NAME10;
	NAME10 [label = "atom (n)"]
	elif23 -> stmts15;
	stmts15 [label = "stmts"]
	stmts15 -> return14;
	return14 [label = "return"]
	return14 -> int13;
	int13 [label = "int (0)"]
	elif23 -> elif22;
	elif22 [label = "elif"]
	elif22 -> operand17;
	operand17 [label = "operand(==)"]
	operand17 -> int18;
	int18 [label = "int (2)"]
	operand17 -> NAME16;
	NAME16 [label = "atom (n)"]
	elif22 -> stmts21;
	stmts21 [label = "stmts"]
	stmts21 -> return20;
	return20 [label = "return"]
	return20 -> int19;
	int19 [label = "int (1)"]
	if40 -> else41;
	else41 [label = "else"]
	else41 -> stmts39;
	stmts39 [label = "stmts"]
	stmts39 -> return38;
	return38 [label = "return"]
	return38 -> arithm_expr37;
	arithm_expr37 [label = "expr"]
	arithm_expr37 -> funccall29;
	funccall29 [label = "funccall(Fibonacci)"]
	funccall29 -> parameter28;
	parameter28 [label = "parameter"]
	parameter28 -> arithm_expr27;
	arithm_expr27 [label = "expr"]
	arithm_expr27 -> NAME24;
	NAME24 [label = "atom (n)"]
	arithm_expr27 -> operand25;
	operand25 [label = "operand(-)"]
	operand25 -> int26;
	int26 [label = "int (1)"]
	arithm_expr37 -> operand30;
	operand30 [label = "operand(+)"]
	operand30 -> funccall36;
	funccall36 [label = "funccall(Fibonacci)"]
	funccall36 -> parameter35;
	parameter35 [label = "parameter"]
	parameter35 -> arithm_expr34;
	arithm_expr34 [label = "expr"]
	arithm_expr34 -> NAME31;
	NAME31 [label = "atom (n)"]
	arithm_expr34 -> operand32;
	operand32 [label = "operand(-)"]
	operand32 -> int33;
	int33 [label = "int (2)"]
	statements44 -> funcdef100;
	funcdef100 [label = "funcdef(fibonacci)"]
	funcdef100 -> parameter46;
	parameter46 [label = "parameter"]
	parameter46 -> tfpdef45;
	tfpdef45 [label = "tfpdef(n)"]
	funcdef100 -> stmts50;
	stmts50 [label = "stmts"]
	stmts50 -> assign49;
	assign49 [label = "assign"]
	assign49 -> NAME47;
	NAME47 [label = "atom (a)"]
	assign49 -> int48;
	int48 [label = "int (0)"]
	stmts50 -> assign53;
	assign53 [label = "assign"]
	assign53 -> NAME51;
	NAME51 [label = "atom (b)"]
	assign53 -> int52;
	int52 [label = "int (1)"]
	stmts50 -> if77;
	if77 [label = "if"]
	if77 -> operand55;
	operand55 [label = "operand(<)"]
	operand55 -> int56;
	int56 [label = "int (0)"]
	operand55 -> NAME54;
	NAME54 [label = "atom (n)"]
	if77 -> stmts59;
	stmts59 [label = "stmts"]
	stmts59 -> print58;
	print58 [label = "print"]
	print58 -> string57;
	string57 [label = "string ('Incorrect input')"]
	if77 -> elif73;
	elif73 [label = "elif"]
	elif73 -> operand61;
	operand61 [label = "operand(==)"]
	operand61 -> int62;
	int62 [label = "int (0)"]
	operand61 -> NAME60;
	NAME60 [label = "atom (n)"]
	elif73 -> stmts65;
	stmts65 [label = "stmts"]
	stmts65 -> return64;
	return64 [label = "return"]
	return64 -> NAME63;
	NAME63 [label = "atom (a)"]
	elif73 -> elif72;
	elif72 [label = "elif"]
	elif72 -> operand67;
	operand67 [label = "operand(==)"]
	operand67 -> int68;
	int68 [label = "int (1)"]
	operand67 -> NAME66;
	NAME66 [label = "atom (n)"]
	elif72 -> stmts71;
	stmts71 [label = "stmts"]
	stmts71 -> return70;
	return70 [label = "return"]
	return70 -> NAME69;
	NAME69 [label = "atom (b)"]
	if77 -> else78;
	else78 [label = "else"]
	else78 -> stmts76;
	stmts76 [label = "stmts"]
	stmts76 -> return75;
	return75 [label = "return"]
	return75 -> int74;
	int74 [label = "int (0)"]
	stmts50 -> for98;
	for98 [label = "for"]
	for98 -> in_range99;
	in_range99 [label = "in_range"]
	in_range99 -> NAME79;
	NAME79 [label = "atom (i)"]
	in_range99 -> testlist82;
	testlist82 [label = "test list"]
	testlist82 -> int80;
	int80 [label = "int (2)"]
	testlist82 -> NAME81;
	NAME81 [label = "atom (n)"]
	for98 -> stmts89;
	stmts89 [label = "stmts"]
	stmts89 -> assign88;
	assign88 [label = "assign"]
	assign88 -> NAME83;
	NAME83 [label = "atom (c)"]
	assign88 -> arithm_expr87;
	arithm_expr87 [label = "expr"]
	arithm_expr87 -> NAME84;
	NAME84 [label = "atom (a)"]
	arithm_expr87 -> operand85;
	operand85 [label = "operand(+)"]
	operand85 -> NAME86;
	NAME86 [label = "atom (b)"]
	stmts89 -> assign92;
	assign92 [label = "assign"]
	assign92 -> NAME90;
	NAME90 [label = "atom (a)"]
	assign92 -> NAME91;
	NAME91 [label = "atom (b)"]
	stmts89 -> assign95;
	assign95 [label = "assign"]
	assign95 -> NAME93;
	NAME93 [label = "atom (b)"]
	assign95 -> NAME94;
	NAME94 [label = "atom (c)"]
	stmts89 -> return97;
	return97 [label = "return"]
	return97 -> NAME96;
	NAME96 [label = "atom (b)"]
	statements44 -> funcdef136;
	funcdef136 [label = "funcdef(main)"]
	funcdef136 -> stmts106;
	stmts106 [label = "stmts"]
	stmts106 -> assign105;
	assign105 [label = "assign"]
	assign105 -> NAME101;
	NAME101 [label = "atom (x)"]
	assign105 -> funccall104;
	funccall104 [label = "funccall(fibonacci)"]
	funccall104 -> parameter103;
	parameter103 [label = "parameter"]
	parameter103 -> int102;
	int102 [label = "int (10)"]
	stmts106 -> assign111;
	assign111 [label = "assign"]
	assign111 -> NAME107;
	NAME107 [label = "atom (y)"]
	assign111 -> funccall110;
	funccall110 [label = "funccall(Fibonacci)"]
	funccall110 -> parameter109;
	parameter109 [label = "parameter"]
	parameter109 -> int108;
	int108 [label = "int (10)"]
	stmts106 -> if118;
	if118 [label = "if"]
	if118 -> operand113;
	operand113 [label = "operand(==)"]
	operand113 -> NAME114;
	NAME114 [label = "atom (y)"]
	operand113 -> NAME112;
	NAME112 [label = "atom (x)"]
	if118 -> stmts117;
	stmts117 [label = "stmts"]
	stmts117 -> print116;
	print116 [label = "print"]
	print116 -> string115;
	string115 [label = "string ('Both fibonacci's matched')"]
	stmts106 -> assign123;
	assign123 [label = "assign"]
	assign123 -> NAME119;
	NAME119 [label = "atom (x)"]
	assign123 -> funccall122;
	funccall122 [label = "funccall(fibonacci)"]
	funccall122 -> parameter121;
	parameter121 [label = "parameter"]
	parameter121 -> int120;
	int120 [label = "int (10)"]
	stmts106 -> assign128;
	assign128 [label = "assign"]
	assign128 -> NAME124;
	NAME124 [label = "atom (y)"]
	assign128 -> funccall127;
	funccall127 [label = "funccall(Fibonacci)"]
	funccall127 -> parameter126;
	parameter126 [label = "parameter"]
	parameter126 -> int125;
	int125 [label = "int (10)"]
	stmts106 -> if135;
	if135 [label = "if"]
	if135 -> operand130;
	operand130 [label = "operand(==)"]
	operand130 -> NAME131;
	NAME131 [label = "atom (y)"]
	operand130 -> NAME129;
	NAME129 [label = "atom (x)"]
	if135 -> stmts134;
	stmts134 [label = "stmts"]
	stmts134 -> print133;
	print133 [label = "print"]
	print133 -> string132;
	string132 [label = "string ('Both fibonacci's matched')"]
	statements44 -> if142;
	if142 [label = "if"]
	if142 -> operand138;
	operand138 [label = "operand(==)"]
	operand138 -> string139;
	string139 [label = "string ('__main__')"]
	operand138 -> NAME137;
	NAME137 [label = "atom (__name__)"]
	if142 -> stmts141;
	stmts141 [label = "stmts"]
	stmts141 -> funccall140;
	funccall140 [label = "funccall(main)"]
}
